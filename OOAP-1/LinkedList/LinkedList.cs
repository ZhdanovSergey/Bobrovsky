using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOAP_1.LinkedList;

interface ILinkedList<TValue>
{
    public const int HEAD_NIL = 0; // Head() ещё не вызывалась
    public const int HEAD_OK = 1; // последняя Head() отработала нормально
    public const int HEAD_ERR = 2; // список пуст

    public const int TAIL_NIL = 0; // Tail() ещё не вызывалась
    public const int TAIL_OK = 1; // последняя Tail() отработала нормально
    public const int TAIL_ERR = 2; // список пуст

    public const int RIGHT_NIL = 0; // Right() ещё не вызывалась
    public const int RIGHT_OK = 1; // последняя Right() отработала нормально
    public const int RIGHT_ERR_EMPTY = 2; // список пуст
    public const int RIGHT_ERR_LAST = 3; // курсор установлен на последний узел

    public const int REMOVE_NIL = 0; // Remove() ещё не вызывалась
    public const int REMOVE_OK = 1; // последняя Remove() отработала нормально
    public const int REMOVE_ERR = 2; // список пуст

    public const int REPLACE_NIL = 0; // Replace() ещё не вызывалась
    public const int REPLACE_OK = 1; // последняя Replace() отработала нормально
    public const int REPLACE_ERR = 2; // список пуст

    public const int FIND_NIL = 0; // Find() ещё не вызывалась
    public const int FIND_OK = 1; // последняя Find() отработала нормально
    public const int FIND_ERR = 2; // подходящий узел не найден

    // КОНСТРУКТОР
    // постусловие: создан новый пустой список
    public ILinkedList<TValue> CreateInstance();

    // КОМАНДЫ

    // предусловие: список не пустой
    // постусловие: курсор установлен на первый узел
    public void Head(); // установить курсор на первый узел в списке

    // предусловие: список не пустой
    // постусловие: курсор установлен на последний узел
    public void Tail(); // установить курсор на последний узел в списке

    // предусловие: список не пустой и курсор не установлен на последний узел
    // постусловие: курсор установлен на узел справа от текущего
    public void Right(); // сдвинуть курсор на один узел вправо

    // постусловие: вставляет новый узел с переданным значением
    //  если список не пустой - новый узел вставляется справа от текущего узла
    //  если список пустой - курсор устанавливается на новый узел
    public void PutRight(TValue value); // вставить справа от текущего узла

    // постусловие: вставляет новый узел с переданным значением
    //  если список не пустой - новый узел вставляется слева от текущего узла
    //  если список пустой - курсор устанавливается на новый узел
    public void PutLeft(TValue value); // вставить слева от текущего узла

    // предусловие: список не пустой
    // постусловие: удален текущий узел
    //  если справа от текущего узла есть узел, курсор устанавливается на него, иначе
    //  если слева от текущего узла есть узел, курсор устанавливается на него
    public void Remove(); // удалить текущий узел

    // постусловие: все узлы удалены
    public void Clear(); // очистить список

    // постусловие: в хвост списка добавлен новый узел с переданным значением
    public void AddTail(TValue value); // добавить новый узел в хвост списка

    // предусловие: список не пустой
    // постусловие: значение текущего узла на изменено на новое
    public void Replace(TValue value); // заменить значение текущего узла на заданное

    // предусловие: список не пустой и справа от текущего узла есть узел с переданным значением
    // постусловие: курсор установлен на первый узел с переданным значением, находящийся справа от текущего узла
    public void Find(TValue value); // установить курсор на следующий узел с искомым значением (по отношению к текущему узлу)

    // постусловие: все узлы с заданным значением удалены и если текущий узел удален, то
    //  если справа от текущего узла есть узел, курсор устанавливается на него, иначе
    //  если слева от текущего узла есть узел, курсор устанавливается на него
    public void RemoveAll(TValue value); // удалить в списке все узлы с заданным значением

    // ЗАПРОСЫ

    // предусловие: список не пустой
    public TValue Get { get; } // получить значение текущего узла
    public int Size { get; } // посчитать количество узлов в списке
    public bool IsHead { get; } // находится ли курсор в начале списка?
    public bool IsTail { get; } // находится ли курсор в конце списка?
    public bool IsValue { get; } // установлен ли курсор на какой-либо узел в списке?

    // ДОПОЛНИТЕЛЬНЫЕ ЗАПРОСЫ
    public int HeadStatus { get; } // возвращает значение HEAD_*
    public int TailStatus { get; } // возвращает значение TAIL_*
    public int RightStatus { get; } // возвращает значение RIGHT_*
    public int RemoveStatus { get; } // возвращает значение REMOVE_*
    public int ReplaceStatus { get; } // возвращает значение REPLACE_*
    public int FindStatus { get; } // возвращает значение FIND_*
}

// 2.2. Почему операция tail не сводима к другим операциям (если исходить из эффективной реализации)?
//      Установить указатель на последний узел можно с помощью операции right, но только за O(N),
//      а с помощью операции tail можно сделать это за O(1).

// 2.3. Операция поиска всех узлов с заданным значением, выдающая список таких узлов, уже не нужна. Почему?
//      АТД спроектирован таким образом, что пользователю не нужно манипулировать узлами, все методы принимают и возвращают только значения узлов.