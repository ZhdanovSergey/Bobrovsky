Организация "содержит" помещение (юридический адрес). Кажется, что организация "является" юридическим адресом, но адрес вполне может смениться. Адрес должен быть атрибутом организации.

Вино "содержит" алкоголь. Кажется, что вино "является" алкоголем, но атрибут "алкоголь" может измениться (например, увеличиться или уменьшиться в каком-то соотношении) отдельно от самого вина. Это отношение has-a.

Есть класс Text и имеется необходимость применения к нему форматирования (подчеркивание, жирность, курсив). Создание отдельных классов, соответствующих каждому виду форматирования, на первый взгляд подходит под отношение "есть", так как "курсивный текст" есть "текст", однако разновидностей форматирования существуют множество, поэтому, возможно, правильней будет создать отдельный класс, задающий характеристики форматирования, и включать его как атрибут в класс Text.
Однако, это пример с определённой неоднозначностью. Если перечень стилей форматирования невелик и чётко предопределён, не исключено, что как раз лучше создавать классы UnderLineText и BoldText, а не выискивать в коде все обращения к атрибуту форматирования при каждой его модификации.

Модератор есть человек? Модератор фактически не использует интерфейс человека, а занимается специализированной деятельностью, поэтому правильное отношение человек has-a модератор (содержит роль/права).
Хотя, опять-таки, когда количество ролей невелико, а человек -- это например абстрактный класс, и стоит задача смоделировать человека исключительно в конкретной профессиональной среде (модератор, администратор, ...), то лучше реализовать иерархию классов через отношение is-a.

Класс Волшебник правильно считать наследником класса Герой.
Волшебника отличает наличие маны и умение использовать заклинания.
Однако непосредственно "магические умения" можно выделить в отдельную систему классов-типов, которую использовать через композицию.
Например, это полезно при создании монстров или NPC-персонажей с магическими возможностями, которые (классы монстров/NPC) лучше наследовать от своих предков, а не от Героя.

Аналогично, есть классы оружия "ядовитый клинок" и "огненный клинок" -- разные наследники класса "клинок".
Оба этих оружия накладывают статус на урон ('яд', 'огонь') и, возможно, на цель ('отравлен', 'обожжён').
Свойства яда или огня могут также применяться и к другим видам оружия (стрелы или мечи), поэтому стоит сформировать отдельную иерархию классов характеристик оружия, которые задают не только статусы уровна, но и содержат оригинальную логику (действие огня или яда), которую конечно удобнее инкапсулировать внутри отдельных классов.
Тогда классы "ядовитый клинок" и "огненный клинок" превратятся в один класс "клинок со статусом", содержащий атрибут класса статуса.

Видно, что даже в таких совсем простых случаях уже возникает неопределённость, которую надо учитывать, исходя из конкретных условий конкретного проекта.